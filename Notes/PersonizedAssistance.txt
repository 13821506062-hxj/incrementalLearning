Model Personalized Assistance:
Idea:
-Train mainModel somehow
-online sequence datapoints in sequences
-predict with data within the sequence with baseModel
-get label for sequence
-check whether sequence fits baseModel
-if not add this sequence to a subroute consisting of all sequences which are not fitting to the baseModel
-train subModel on subsequence
-next time a new subroute is determined, check afterwards whether it fits to one of the submodels, if yes increase its support of non-accidentalness
-merge submodel trained on nonaccidental data with mainModel

-When predicting within a route which does not fit to the mainModel, the prediction can be done with all the submodels fitting to the current subroute so far.

-a)how to measure whether an example(sequence) fits to the baseModel?
  -the same as active drift-detection
  -accuracy on the sequence compared to usual accuracy
  -comparing distributions with cross-entropy/kullback-leibler divergence etc.
-b)how to measure whether a sequence of examples(sequence) fits to the baseModel?
  -as a but a sum of it
-c)how to define when a reoccuring pattern is not accidental?
  -simply count its occurence
  -statistical measure maybe?
-d)when should subModels be forgotten?
  -aging for example/ when maximum is reached
-e)how to merge a subModel into the main-Model, after deciding the submodel is learned on data which is not-accidental
  -store examples of submodels and retrain mainModel with it (maybe increase learning rates etc.)
-f)how to get the baseModel initially
  -record several initial routes and learn on it
  
